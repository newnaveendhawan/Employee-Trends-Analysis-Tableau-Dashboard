# -*- coding: utf-8 -*-
"""Employee Trends Analysis Sql.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1okrXaB5HH7AlAPWGpSpwoteBKCfdoSR1
"""

import pandas as pd
import sqlite3

df = pd.read_excel("Employee Trends Analysis - SQL.xlsx")  # Make sure filename is exact
df

conn = sqlite3.connect(":memory:")
df.to_sql("employee_data", conn, index=False, if_exists='replace')

pd.read_sql_query("SELECT * FROM employee_data LIMIT 5", conn)

pd.read_sql_query("""
SELECT department, COUNT(*) AS employee_count
FROM employee_data
GROUP BY department
""", conn)

pd.read_sql_query("""
SELECT department, AVG(age) AS average_age
FROM employee_data
GROUP BY department
""", conn)

pd.read_sql_query("""
SELECT department, job_role, COUNT(*) AS role_count
FROM employee_data
GROUP BY department, job_role
ORDER BY department, role_count DESC
""", conn)

pd.read_sql_query("""
SELECT education, AVG(job_satisfaction) AS average_satisfaction
FROM employee_data
GROUP BY education
""", conn)

pd.read_sql_query("""
SELECT job_satisfaction, AVG(age) AS average_age
FROM employee_data
GROUP BY job_satisfaction
""", conn)

pd.read_sql_query("""
SELECT department, AVG(job_satisfaction) AS average_satisfaction
FROM employee_data
GROUP BY department
ORDER BY average_satisfaction DESC
LIMIT 1
""", conn)

pd.read_sql_query("""
SELECT education, AVG(job_satisfaction) AS average_satisfaction
FROM employee_data
WHERE business_travel = 'Travel_Frequently'
GROUP BY education
ORDER BY average_satisfaction DESC
LIMIT 3
""", conn)



pd.read_sql_query("""SELECT COUNT(*) AS total_employees FROM employee_data

""", conn)

pd.read_sql_query("""SELECT COUNT(DISTINCT Department) AS total_departments FROM employee_data
""", conn)

pd.read_sql_query("""SELECT COUNT(DISTINCT Job_Role) AS total_roles FROM employee_data
""", conn)

pd.read_sql_query("""SELECT Attrition, COUNT(*) AS total FROM employee_data GROUP BY Attrition
""", conn)

pd.read_sql_query("""SELECT Department,
       SUM(CASE WHEN Attrition = 'Yes' THEN 1 ELSE 0 END) * 100.0 / COUNT(*) AS attrition_rate
FROM employee_data
GROUP BY Department
ORDER BY attrition_rate DESC
""", conn)

pd.read_sql_query("""SELECT Gender, COUNT(*) AS total FROM employee_data GROUP BY Gender
""", conn)

pd.read_sql_query("""SELECT Marital_Status, COUNT(*) AS total FROM employee_data GROUP BY Marital_Status
""", conn)

pd.read_sql_query("""SELECT Age_Group, COUNT(*) AS total FROM employee_data GROUP BY Age_Group
""", conn)

pd.read_sql_query("""SELECT Job_Role, COUNT(*) AS total FROM employee_data GROUP BY Job_Role ORDER BY total DESC
""", conn)

pd.read_sql_query("""SELECT Department, Job_Role, COUNT(*) AS role_count
FROM employee_data
GROUP BY Department, Job_Role
ORDER BY Department, role_count DESC
""", conn)

pd.read_sql_query("""SELECT Education, AVG(Job_Satisfaction) AS avg_satisfaction
FROM employee_data
GROUP BY Education
""", conn)

pd.read_sql_query("""SELECT Education, AVG(Job_Satisfaction) AS avg_satisfaction
FROM employee_data
GROUP BY Education
""", conn)

pd.read_sql_query("""SELECT Business_Travel,
       SUM(CASE WHEN Attrition = 'Yes' THEN 1 ELSE 0 END) * 100.0 / COUNT(*) AS attrition_rate
FROM employee_data
GROUP BY Business_Travel
""", conn)

pd.read_sql_query("""SELECT Education_field,
       SUM(CASE WHEN Attrition = 'Yes' THEN 1 ELSE 0 END) * 100.0 / COUNT(*) AS attrition_rate
FROM employee_data
GROUP BY Education_field
ORDER BY attrition_rate DESC
""", conn)

pd.read_sql_query("""SELECT Job_Role,
       SUM(CASE WHEN Attrition = 'Yes' THEN 1 ELSE 0 END) * 100.0 / COUNT(*) AS attrition_rate
FROM employee_data
GROUP BY Job_Role
ORDER BY attrition_rate DESC
LIMIT 5""", conn)

pd.read_sql_query("""SELECT Marital_Status, AVG(Job_Satisfaction) AS avg_satisfaction
FROM employee_data
GROUP BY Marital_Status""", conn)

pd.read_sql_query("""SELECT Age_Group,
       SUM(CASE WHEN Attrition = 'Yes' THEN 1 ELSE 0 END) * 100.0 / COUNT(*) AS attrition_rate
FROM employee_data
GROUP BY Age_Group
ORDER BY attrition_rate DESC""", conn)

pd.read_sql_query("""
SELECT Department, Gender, COUNT(*) AS count
FROM employee_data
GROUP BY Department, Gender
ORDER BY Department
""", conn)

pd.read_sql_query("""
SELECT Gender,
       SUM(CASE WHEN Attrition = 'Yes' THEN 1 ELSE 0 END) * 100.0 / COUNT(*) AS attrition_rate
FROM employee_data
GROUP BY Gender
""", conn)

pd.read_sql_query("""
SELECT Marital_Status,
       SUM(CASE WHEN Attrition = 'Yes' THEN 1 ELSE 0 END) * 100.0 / COUNT(*) AS attrition_rate
FROM employee_data
GROUP BY Marital_Status
""", conn)

pd.read_sql_query("""
SELECT Job_Satisfaction,
       COUNT(*) AS total_employees,
       SUM(CASE WHEN Attrition = 'Yes' THEN 1 ELSE 0 END) AS attritions,
       SUM(CASE WHEN Attrition = 'Yes' THEN 1 ELSE 0 END) * 100.0 / COUNT(*) AS attrition_rate
FROM employee_data
GROUP BY Job_Satisfaction
ORDER BY Job_Satisfaction
""", conn)

pd.read_sql_query("""
SELECT Business_Travel, AVG(Job_Satisfaction) AS avg_satisfaction
FROM employee_data
GROUP BY Business_Travel
ORDER BY avg_satisfaction DESC
""", conn)

pd.read_sql_query("""
SELECT Department, COUNT(*) AS active_count
FROM employee_data
WHERE Active_Employee = 1
GROUP BY Department
ORDER BY active_count DESC
LIMIT 3
""", conn)

pd.read_sql_query("""
SELECT Job_Role, AVG(Age) AS avg_age
FROM employee_data
GROUP BY Job_Role
ORDER BY avg_age DESC
""", conn)

pd.read_sql_query("""
SELECT Education_field, AVG(Job_Satisfaction) AS avg_satisfaction
FROM employee_data
GROUP BY Education_field
ORDER BY avg_satisfaction DESC
""", conn)

pd.read_sql_query("""
SELECT Marital_Status, Business_Travel,
       SUM(CASE WHEN Attrition = 'Yes' THEN 1 ELSE 0 END) * 100.0 / COUNT(*) AS attrition_rate
FROM employee_data
GROUP BY Marital_Status, Business_Travel
ORDER BY attrition_rate DESC
""", conn)

pd.read_sql_query("""
SELECT Emp_No, Department, Job_Role, Age, Job_Satisfaction, Business_Travel
FROM employee_data
WHERE Job_Satisfaction <= 2 AND Business_Travel = 'Travel_Frequently' AND Attrition = 'No'
""", conn)

pd.read_sql_query("""
SELECT Education,
       SUM(CASE WHEN Attrition = 'Yes' THEN 1 ELSE 0 END) * 100.0 / COUNT(*) AS attrition_rate
FROM employee_data
GROUP BY Education
ORDER BY attrition_rate DESC
""", conn)

pd.read_sql_query("""
SELECT Department, Education, AVG(Job_Satisfaction) AS avg_satisfaction
FROM employee_data
GROUP BY Department, Education
ORDER BY Department, avg_satisfaction DESC
""", conn)

# ðŸ“¦ Install required packages (if not already installed)
# !pip install openpyxl plotly

import pandas as pd
import sqlite3
import plotly.express as px

# âœ… Step 1: Load Excel and Prepare SQLite
excel_path = "/content/Employee Trends Analysis - SQL.xlsx"
df = pd.read_excel(excel_path)
df.columns = df.columns.str.strip().str.replace(" ", "_")

conn = sqlite3.connect(":memory:")
df.to_sql("employee_data", conn, index=False, if_exists='replace')

# âœ… Step 2: Define Queries
queries = {
    "Attrition by Department": """
        SELECT Department,
               SUM(CASE WHEN Attrition = 'Yes' THEN 1 ELSE 0 END) * 100.0 / COUNT(*) AS attrition_rate
        FROM employee_data
        GROUP BY Department
        ORDER BY attrition_rate DESC
    """,

    "Satisfaction by Education Field": """
        SELECT Education_field, AVG(Job_Satisfaction) AS avg_satisfaction
        FROM employee_data
        GROUP BY Education_field
        ORDER BY avg_satisfaction DESC
    """,

    "Gender Distribution by Department": """
        SELECT Department, Gender, COUNT(*) AS count
        FROM employee_data
        GROUP BY Department, Gender
    """,

    "Attrition Rate by Marital Status": """
        SELECT Marital_Status,
               SUM(CASE WHEN Attrition = 'Yes' THEN 1 ELSE 0 END) * 100.0 / COUNT(*) AS attrition_rate
        FROM employee_data
        GROUP BY Marital_Status
    """,

    "Attrition Rate by Job Satisfaction": """
        SELECT Job_Satisfaction,
               COUNT(*) AS total_employees,
               SUM(CASE WHEN Attrition = 'Yes' THEN 1 ELSE 0 END) AS attritions,
               SUM(CASE WHEN Attrition = 'Yes' THEN 1 ELSE 0 END) * 100.0 / COUNT(*) AS attrition_rate
        FROM employee_data
        GROUP BY Job_Satisfaction
        ORDER BY Job_Satisfaction
    """,

    "Job Satisfaction by Business Travel": """
        SELECT Business_Travel, AVG(Job_Satisfaction) AS avg_satisfaction
        FROM employee_data
        GROUP BY Business_Travel
        ORDER BY avg_satisfaction DESC
    """,

    "Average Age by Job Role": """
        SELECT Job_Role, AVG(Age) AS avg_age
        FROM employee_data
        GROUP BY Job_Role
        ORDER BY avg_age DESC
    """,

    "Department & Education-wise Satisfaction": """
        SELECT Department, Education, AVG(Job_Satisfaction) AS avg_satisfaction
        FROM employee_data
        GROUP BY Department, Education
        ORDER BY Department, avg_satisfaction DESC
    """,

    "Attrition by Gender": """
        SELECT Gender,
               SUM(CASE WHEN Attrition = 'Yes' THEN 1 ELSE 0 END) * 100.0 / COUNT(*) AS attrition_rate
        FROM employee_data
        GROUP BY Gender
    """,
}

# âœ… Step 3: Execute Queries and Plot
for title, sql in queries.items():
    df_result = pd.read_sql_query(sql, conn)
    print(f"\nðŸ“Š {title}:")
    display(df_result)

    # Auto-select chart type
    if "attrition_rate" in df_result.columns and "Department" in df_result.columns:
        fig = px.bar(df_result, x="Department", y="attrition_rate", title=title)
        fig.show()
    elif "avg_satisfaction" in df_result.columns and "Education_field" in df_result.columns:
        fig = px.bar(df_result, x="Education_field", y="avg_satisfaction", title=title)
        fig.show()
    elif "Gender" in df_result.columns and "count" in df_result.columns:
        fig = px.bar(df_result, x="Department", y="count", color="Gender", barmode="group", title=title)
        fig.show()
    elif "Job_Role" in df_result.columns:
        fig = px.bar(df_result, x="Job_Role", y="avg_age", title=title)
        fig.show()
    elif "Business_Travel" in df_result.columns:
        fig = px.bar(df_result, x="Business_Travel", y="avg_satisfaction", title=title)
        fig.show()
    elif "Job_Satisfaction" in df_result.columns and "attrition_rate" in df_result.columns:
        fig = px.bar(df_result, x="Job_Satisfaction", y="attrition_rate", title=title)
        fig.show()

# âœ… Done!

# ðŸ“¦ Install required packages (if not already installed)
# !pip install openpyxl plotly

import pandas as pd
import sqlite3
import plotly.express as px

# âœ… Step 1: Load Excel and Prepare SQLite
excel_path = "/content/Employee Trends Analysis - SQL.xlsx"
df = pd.read_excel(excel_path)
df.columns = df.columns.str.strip().str.replace(" ", "_")

conn = sqlite3.connect(":memory:")
df.to_sql("employee_data", conn, index=False, if_exists='replace')

# âœ… Step 2: Define Queries
queries = {
    "1. Attrition by Department": """
        SELECT Department,
               SUM(CASE WHEN Attrition = 'Yes' THEN 1 ELSE 0 END) * 100.0 / COUNT(*) AS attrition_rate
        FROM employee_data
        GROUP BY Department
        ORDER BY attrition_rate DESC
    """,

    "2. Satisfaction by Education Field": """
        SELECT Education_field, AVG(Job_Satisfaction) AS avg_satisfaction
        FROM employee_data
        GROUP BY Education_field
        ORDER BY avg_satisfaction DESC
    """,

    "3. Gender Distribution by Department": """
        SELECT Department, Gender, COUNT(*) AS count
        FROM employee_data
        GROUP BY Department, Gender
    """,

    "4. Attrition Rate by Marital Status": """
        SELECT Marital_Status,
               SUM(CASE WHEN Attrition = 'Yes' THEN 1 ELSE 0 END) * 100.0 / COUNT(*) AS attrition_rate
        FROM employee_data
        GROUP BY Marital_Status
    """,

    "5. Attrition Rate by Job Satisfaction": """
        SELECT Job_Satisfaction,
               COUNT(*) AS total_employees,
               SUM(CASE WHEN Attrition = 'Yes' THEN 1 ELSE 0 END) AS attritions,
               SUM(CASE WHEN Attrition = 'Yes' THEN 1 ELSE 0 END) * 100.0 / COUNT(*) AS attrition_rate
        FROM employee_data
        GROUP BY Job_Satisfaction
        ORDER BY Job_Satisfaction
    """,

    "6. Job Satisfaction by Business Travel": """
        SELECT Business_Travel, AVG(Job_Satisfaction) AS avg_satisfaction
        FROM employee_data
        GROUP BY Business_Travel
        ORDER BY avg_satisfaction DESC
    """,

    "7. Average Age by Job Role": """
        SELECT Job_Role, AVG(Age) AS avg_age
        FROM employee_data
        GROUP BY Job_Role
        ORDER BY avg_age DESC
    """,

    "8. Department & Education-wise Satisfaction": """
        SELECT Department, Education, AVG(Job_Satisfaction) AS avg_satisfaction
        FROM employee_data
        GROUP BY Department, Education
        ORDER BY Department, avg_satisfaction DESC
    """,

    "9. Attrition by Gender": """
        SELECT Gender,
               SUM(CASE WHEN Attrition = 'Yes' THEN 1 ELSE 0 END) * 100.0 / COUNT(*) AS attrition_rate
        FROM employee_data
        GROUP BY Gender
    """,

    "10. Attrition Rate by Education": """
        SELECT Education,
               SUM(CASE WHEN Attrition = 'Yes' THEN 1 ELSE 0 END) * 100.0 / COUNT(*) AS attrition_rate
        FROM employee_data
        GROUP BY Education
        ORDER BY attrition_rate DESC
    """,

    "11. Active Employees by Department": """
        SELECT Department, COUNT(*) AS active_count
        FROM employee_data
        WHERE Active_Employee = 1
        GROUP BY Department
        ORDER BY active_count DESC
        LIMIT 3
    """,

    "12. Satisfaction by Marital Status": """
        SELECT Marital_Status, AVG(Job_Satisfaction) AS avg_satisfaction
        FROM employee_data
        GROUP BY Marital_Status
        ORDER BY avg_satisfaction DESC
    """,

    "13. High Risk Employees (Low Satisfaction, High Travel)": """
        SELECT Emp_No, Department, Job_Role, Age, Job_Satisfaction, Business_Travel
        FROM employee_data
        WHERE Job_Satisfaction <= 2 AND Business_Travel = 'Travel_Frequently' AND Attrition = 'No'
    """,

    "14. Top Job Roles with High Attrition": """
        SELECT Job_Role, COUNT(*) AS total,
               SUM(CASE WHEN Attrition = 'Yes' THEN 1 ELSE 0 END) AS left,
               SUM(CASE WHEN Attrition = 'Yes' THEN 1 ELSE 0 END) * 100.0 / COUNT(*) AS attrition_rate
        FROM employee_data
        GROUP BY Job_Role
        ORDER BY attrition_rate DESC
        LIMIT 5
    """,

    "15. Average Age by Department": """
        SELECT Department, AVG(Age) AS avg_age
        FROM employee_data
        GROUP BY Department
        ORDER BY avg_age DESC
    """,

    "16. Employees Count by Education Field": """
        SELECT Education_field, COUNT(*) AS total
        FROM employee_data
        GROUP BY Education_field
        ORDER BY total DESC
    """,

    "17. Average Satisfaction by Job Role": """
        SELECT Job_Role, AVG(Job_Satisfaction) AS avg_satisfaction
        FROM employee_data
        GROUP BY Job_Role
        ORDER BY avg_satisfaction DESC
    """,

    "18. Business Travel by Department": """
        SELECT Department, Business_Travel, COUNT(*) AS count
        FROM employee_data
        GROUP BY Department, Business_Travel
        ORDER BY Department
    """,

    "19. Married Employees by Department": """
        SELECT Department, COUNT(*) AS married_count
        FROM employee_data
        WHERE Marital_Status = 'Married'
        GROUP BY Department
        ORDER BY married_count DESC
    """,

    "20. Education vs Job Role Satisfaction": """
        SELECT Education, Job_Role, AVG(Job_Satisfaction) AS avg_satisfaction
        FROM employee_data
        GROUP BY Education, Job_Role
        ORDER BY avg_satisfaction DESC
        LIMIT 10
    """,

    "21. Most Common Job Roles in Each Department": """
        SELECT Department, Job_Role, COUNT(*) AS role_count
        FROM employee_data
        GROUP BY Department, Job_Role
        ORDER BY Department, role_count DESC
    """,

    "22. Satisfaction by Education and Travel": """
        SELECT Education, Business_Travel, AVG(Job_Satisfaction) AS avg_satisfaction
        FROM employee_data
        GROUP BY Education, Business_Travel
        ORDER BY avg_satisfaction DESC
    """
}

# âœ… Step 3: Execute Queries and Plot
for title, sql in queries.items():
    df_result = pd.read_sql_query(sql, conn)
    print(f"\nðŸ“Š {title}:")
    display(df_result)

    # Auto-select chart type
    if "attrition_rate" in df_result.columns and "Department" in df_result.columns:
        fig = px.bar(df_result, x="Department", y="attrition_rate", title=title)
        fig.show()
    elif "avg_satisfaction" in df_result.columns and "Education_field" in df_result.columns:
        fig = px.bar(df_result, x="Education_field", y="avg_satisfaction", title=title)
        fig.show()
    elif "Gender" in df_result.columns and "count" in df_result.columns:
        fig = px.bar(df_result, x="Department", y="count", color="Gender", barmode="group", title=title)
        fig.show()
    elif "Job_Role" in df_result.columns and "avg_age" in df_result.columns:
        fig = px.bar(df_result, x="Job_Role", y="avg_age", title=title)
        fig.show()
    elif "Business_Travel" in df_result.columns and "avg_satisfaction" in df_result.columns:
        fig = px.bar(df_result, x="Business_Travel", y="avg_satisfaction", title=title)
        fig.show()
    elif "Job_Satisfaction" in df_result.columns and "attrition_rate" in df_result.columns:
        fig = px.bar(df_result, x="Job_Satisfaction", y="attrition_rate", title=title)
        fig.show()

# âœ… Done!



